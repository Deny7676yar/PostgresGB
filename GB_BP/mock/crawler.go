// Code generated by MockGen. DO NOT EDIT.
// Source: crawler.go

// Package mock_main is a generated GoMock package.
package mock_main

import (
	context "context"
	reflect "reflect"
	sync "sync"

	GB_BP "github.com/Deny7676yar/Go_level2/GB_BP"
	gomock "github.com/golang/mock/gomock"
)

// MockPage is a mock of Page interface.
type MockPage struct {
	ctrl     *gomock.Controller
	recorder *MockPageMockRecorder
}

// MockPageMockRecorder is the mock recorder for MockPage.
type MockPageMockRecorder struct {
	mock *MockPage
}

// NewMockPage creates a new mock instance.
func NewMockPage(ctrl *gomock.Controller) *MockPage {
	mock := &MockPage{ctrl: ctrl}
	mock.recorder = &MockPageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPage) EXPECT() *MockPageMockRecorder {
	return m.recorder
}

// GetLinks mocks base method.
func (m *MockPage) GetLinks() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLinks")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetLinks indicates an expected call of GetLinks.
func (mr *MockPageMockRecorder) GetLinks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLinks", reflect.TypeOf((*MockPage)(nil).GetLinks))
}

// GetTitle mocks base method.
func (m *MockPage) GetTitle() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTitle")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetTitle indicates an expected call of GetTitle.
func (mr *MockPageMockRecorder) GetTitle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTitle", reflect.TypeOf((*MockPage)(nil).GetTitle))
}

// MockRequester is a mock of Requester interface.
type MockRequester struct {
	ctrl     *gomock.Controller
	recorder *MockRequesterMockRecorder
}

// MockRequesterMockRecorder is the mock recorder for MockRequester.
type MockRequesterMockRecorder struct {
	mock *MockRequester
}

// NewMockRequester creates a new mock instance.
func NewMockRequester(ctrl *gomock.Controller) *MockRequester {
	mock := &MockRequester{ctrl: ctrl}
	mock.recorder = &MockRequesterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRequester) EXPECT() *MockRequesterMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockRequester) Get(ctx context.Context, url string) (GB_BP.Page, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, url)
	ret0, _ := ret[0].(GB_BP.Page)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRequesterMockRecorder) Get(ctx, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRequester)(nil).Get), ctx, url)
}

// MockCrawler is a mock of Crawler interface.
type MockCrawler struct {
	ctrl     *gomock.Controller
	recorder *MockCrawlerMockRecorder
}

// MockCrawlerMockRecorder is the mock recorder for MockCrawler.
type MockCrawlerMockRecorder struct {
	mock *MockCrawler
}

// NewMockCrawler creates a new mock instance.
func NewMockCrawler(ctrl *gomock.Controller) *MockCrawler {
	mock := &MockCrawler{ctrl: ctrl}
	mock.recorder = &MockCrawlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCrawler) EXPECT() *MockCrawlerMockRecorder {
	return m.recorder
}

// ChanResult mocks base method.
func (m *MockCrawler) ChanResult() <-chan GB_BP.CrawlResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChanResult")
	ret0, _ := ret[0].(<-chan GB_BP.CrawlResult)
	return ret0
}

// ChanResult indicates an expected call of ChanResult.
func (mr *MockCrawlerMockRecorder) ChanResult() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChanResult", reflect.TypeOf((*MockCrawler)(nil).ChanResult))
}

// Scan mocks base method.
func (m *MockCrawler) Scan(ctx context.Context, wg *sync.WaitGroup, url string, depth int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Scan", ctx, wg, url, depth)
}

// Scan indicates an expected call of Scan.
func (mr *MockCrawlerMockRecorder) Scan(ctx, wg, url, depth interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockCrawler)(nil).Scan), ctx, wg, url, depth)
}
