// Code generated by MockGen. DO NOT EDIT.
// Source: page.go

// Package mock_page is a generated GoMock package.
package mock_page

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPage is a mock of Page interface.
type MockPage struct {
	ctrl     *gomock.Controller
	recorder *MockPageMockRecorder
}

// MockPageMockRecorder is the mock recorder for MockPage.
type MockPageMockRecorder struct {
	mock *MockPage
}

// NewMockPage creates a new mock instance.
func NewMockPage(ctrl *gomock.Controller) *MockPage {
	mock := &MockPage{ctrl: ctrl}
	mock.recorder = &MockPageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPage) EXPECT() *MockPageMockRecorder {
	return m.recorder
}

// GetLinks mocks base method.
func (m *MockPage) GetLinks() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLinks")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetLinks indicates an expected call of GetLinks.
func (mr *MockPageMockRecorder) GetLinks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLinks", reflect.TypeOf((*MockPage)(nil).GetLinks))
}

// GetTitle mocks base method.
func (m *MockPage) GetTitle() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTitle")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetTitle indicates an expected call of GetTitle.
func (mr *MockPageMockRecorder) GetTitle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTitle", reflect.TypeOf((*MockPage)(nil).GetTitle))
}
